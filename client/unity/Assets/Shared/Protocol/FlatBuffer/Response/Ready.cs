// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatBuffer.Response
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Ready : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Ready GetRootAsReady(ByteBuffer _bb) { return GetRootAsReady(_bb, new Ready()); }
  public static Ready GetRootAsReady(ByteBuffer _bb, Ready obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Ready __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Seed { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatBuffer.Response.User? Users(int j) { int o = __p.__offset(6); return o != 0 ? (FlatBuffer.Response.User?)(new FlatBuffer.Response.User()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int UsersLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string Ready(int j) { int o = __p.__offset(8); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ReadyLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<FlatBuffer.Response.Ready> CreateReady(FlatBufferBuilder builder,
      long seed = 0,
      VectorOffset usersOffset = default(VectorOffset),
      VectorOffset readyOffset = default(VectorOffset)) {
    builder.StartTable(3);
    Ready.AddSeed(builder, seed);
    Ready.AddReady(builder, readyOffset);
    Ready.AddUsers(builder, usersOffset);
    return Ready.EndReady(builder);
  }

  public static void StartReady(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddSeed(FlatBufferBuilder builder, long seed) { builder.AddLong(0, seed, 0); }
  public static void AddUsers(FlatBufferBuilder builder, VectorOffset usersOffset) { builder.AddOffset(1, usersOffset.Value, 0); }
  public static VectorOffset CreateUsersVector(FlatBufferBuilder builder, Offset<FlatBuffer.Response.User>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateUsersVectorBlock(FlatBufferBuilder builder, Offset<FlatBuffer.Response.User>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartUsersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddReady(FlatBufferBuilder builder, VectorOffset readyOffset) { builder.AddOffset(2, readyOffset.Value, 0); }
  public static VectorOffset CreateReadyVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateReadyVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartReadyVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FlatBuffer.Response.Ready> EndReady(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatBuffer.Response.Ready>(o);
  }
};


}
