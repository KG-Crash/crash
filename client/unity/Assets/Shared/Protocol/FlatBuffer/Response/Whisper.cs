// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatBuffer.Response
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Whisper : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Whisper GetRootAsWhisper(ByteBuffer _bb) { return GetRootAsWhisper(_bb, new Whisper()); }
  public static Whisper GetRootAsWhisper(ByteBuffer _bb, Whisper obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Whisper __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string From { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFromBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetFromBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetFromArray() { return __p.__vector_as_array<byte>(4); }
  public string To { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetToBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetToBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetToArray() { return __p.__vector_as_array<byte>(6); }
  public string Message { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMessageBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetMessageBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetMessageArray() { return __p.__vector_as_array<byte>(8); }
  public uint Error { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<FlatBuffer.Response.Whisper> CreateWhisper(FlatBufferBuilder builder,
      StringOffset fromOffset = default(StringOffset),
      StringOffset toOffset = default(StringOffset),
      StringOffset messageOffset = default(StringOffset),
      uint error = 0) {
    builder.StartTable(4);
    Whisper.AddError(builder, error);
    Whisper.AddMessage(builder, messageOffset);
    Whisper.AddTo(builder, toOffset);
    Whisper.AddFrom(builder, fromOffset);
    return Whisper.EndWhisper(builder);
  }

  public static void StartWhisper(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddFrom(FlatBufferBuilder builder, StringOffset fromOffset) { builder.AddOffset(0, fromOffset.Value, 0); }
  public static void AddTo(FlatBufferBuilder builder, StringOffset toOffset) { builder.AddOffset(1, toOffset.Value, 0); }
  public static void AddMessage(FlatBufferBuilder builder, StringOffset messageOffset) { builder.AddOffset(2, messageOffset.Value, 0); }
  public static void AddError(FlatBufferBuilder builder, uint error) { builder.AddUint(3, error, 0); }
  public static Offset<FlatBuffer.Response.Whisper> EndWhisper(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatBuffer.Response.Whisper>(o);
  }
};


}
