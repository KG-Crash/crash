// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatBuffer.Response
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct EnterRoom : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EnterRoom GetRootAsEnterRoom(ByteBuffer _bb) { return GetRootAsEnterRoom(_bb, new EnterRoom()); }
  public static EnterRoom GetRootAsEnterRoom(ByteBuffer _bb, EnterRoom obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EnterRoom __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string User { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUserBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetUserBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetUserArray() { return __p.__vector_as_array<byte>(4); }
  public FlatBuffer.Response.User? Users(int j) { int o = __p.__offset(6); return o != 0 ? (FlatBuffer.Response.User?)(new FlatBuffer.Response.User()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int UsersLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string Master { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMasterBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetMasterBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetMasterArray() { return __p.__vector_as_array<byte>(8); }
  public uint Error { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<FlatBuffer.Response.EnterRoom> CreateEnterRoom(FlatBufferBuilder builder,
      StringOffset userOffset = default(StringOffset),
      VectorOffset usersOffset = default(VectorOffset),
      StringOffset masterOffset = default(StringOffset),
      uint error = 0) {
    builder.StartTable(4);
    EnterRoom.AddError(builder, error);
    EnterRoom.AddMaster(builder, masterOffset);
    EnterRoom.AddUsers(builder, usersOffset);
    EnterRoom.AddUser(builder, userOffset);
    return EnterRoom.EndEnterRoom(builder);
  }

  public static void StartEnterRoom(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddUser(FlatBufferBuilder builder, StringOffset userOffset) { builder.AddOffset(0, userOffset.Value, 0); }
  public static void AddUsers(FlatBufferBuilder builder, VectorOffset usersOffset) { builder.AddOffset(1, usersOffset.Value, 0); }
  public static VectorOffset CreateUsersVector(FlatBufferBuilder builder, Offset<FlatBuffer.Response.User>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateUsersVectorBlock(FlatBufferBuilder builder, Offset<FlatBuffer.Response.User>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartUsersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMaster(FlatBufferBuilder builder, StringOffset masterOffset) { builder.AddOffset(2, masterOffset.Value, 0); }
  public static void AddError(FlatBufferBuilder builder, uint error) { builder.AddUint(3, error, 0); }
  public static Offset<FlatBuffer.Response.EnterRoom> EndEnterRoom(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatBuffer.Response.EnterRoom>(o);
  }
};


}
