// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Response

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RouteEnter struct {
	_tab flatbuffers.Table
}

func GetRootAsRouteEnter(buf []byte, offset flatbuffers.UOffsetT) *RouteEnter {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RouteEnter{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *RouteEnter) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RouteEnter) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *RouteEnter) Host() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *RouteEnter) Port() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RouteEnter) MutatePort(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *RouteEnter) Error() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RouteEnter) MutateError(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func RouteEnterStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func RouteEnterAddHost(builder *flatbuffers.Builder, host flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(host), 0)
}
func RouteEnterAddPort(builder *flatbuffers.Builder, port uint32) {
	builder.PrependUint32Slot(1, port, 0)
}
func RouteEnterAddError(builder *flatbuffers.Builder, error uint32) {
	builder.PrependUint32Slot(2, error, 0)
}
func RouteEnterEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
