// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Response

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Whisper struct {
	_tab flatbuffers.Table
}

func GetRootAsWhisper(buf []byte, offset flatbuffers.UOffsetT) *Whisper {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Whisper{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Whisper) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Whisper) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Whisper) From() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Whisper) To() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Whisper) Message() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Whisper) Error() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Whisper) MutateError(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

func WhisperStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func WhisperAddFrom(builder *flatbuffers.Builder, from flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(from), 0)
}
func WhisperAddTo(builder *flatbuffers.Builder, to flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(to), 0)
}
func WhisperAddMessage(builder *flatbuffers.Builder, message flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(message), 0)
}
func WhisperAddError(builder *flatbuffers.Builder, error uint32) {
	builder.PrependUint32Slot(3, error, 0)
}
func WhisperEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
